# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:  # Branch names to include or exclude for triggering a run.
      include: [ main, devlopment ] # List of items to include. 
      exclude: [ eda, nyt_dlt, feature/demo_branch ] # List of item to exclude (This is optional)

  tags:
    include:
      - v*.*
      - prod

pool:
  vmImage: ubuntu-latest

steps:
- script: |
    
    REPO_PAT=$(PAT)
    B64_PAT=$(printf "%s"":$REPO_PAT" | base64)
    # git -c http.extraHeader="Authorization: Basic ${B64_PAT}" clone https://github.com/diggibyte/platform_dev.git
    git -c http.extraHeader="Authorization: Basic ${B64_PAT}" submodule add https://github.com/diggibyte/platform_tfmodules.git
    ls -ltr
  displayName: 'Checkout Latest with submodule update'
- task: TerraformCLI@0
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/aad_mapping'
    secureVarsFile: 'terraform_ad_env.env'
    backendType: 'selfConfigured'
    allowTelemetryCollection: true

- task: TerraformCLI@0
  inputs:
    command: 'fmt'
    workingDirectory: '$(System.DefaultWorkingDirectory)/aad_mapping'
    allowTelemetryCollection: true

- task: TerraformCLI@0
  inputs:
    command: 'plan'
    workingDirectory: '$(System.DefaultWorkingDirectory)/aad_mapping'
    secureVarsFile: 'terraform_ad_env.env'
    allowTelemetryCollection: true


     
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)'
    Contents: |
      **/*
      !.git/**/*
      !aad_mapping/.terraform*
      !aad_mapping/.terraform.lock.hcl
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: '_terraform_aad_mapping'
    publishLocation: 'Container'
